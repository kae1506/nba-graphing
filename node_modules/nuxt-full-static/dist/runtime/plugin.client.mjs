import { defineNuxtPlugin, useRouter, useRoute } from "#imports";
export default defineNuxtPlugin((nuxtApp) => {
  const router = useRouter();
  const route = useRoute();
  const resolve = (route2) => typeof route2 === "string" ? route2 : router.resolve(route2).path;
  const s = {
    prefetched: /* @__PURE__ */ new Set([route.path]),
    prefetch: async (route2) => {
      const path = resolve(route2);
      if (!s.prefetched.has(path)) {
        s.prefetched.add(path);
        const name = path === "/" ? "/index" : path;
        const { data, state } = await $fetch(`/api/_static${name}.json`);
        Object.assign(nuxtApp.payload.data, data);
        for (const item in state) {
          nuxtApp.payload.state[item] ??= state[item];
        }
      }
    }
  };
  router.beforeResolve((to) => s.prefetch(to.path));
  return {
    provide: { static: s }
  };
});
